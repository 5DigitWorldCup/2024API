version: '3.10'

services:
  redis:
    image: redis
    depends_on:
      - fluentd
    ports:
      - "6379:6379"
    restart: on-failure
    labels:
      - "traefik.enable=false"
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: redis

  celery_worker:
    restart: on-failure
    depends_on:
      - redis
      - fluentd
    build:
      context: .
      target: celery_worker
    volumes:
      - ./.env:/app/.env
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: celery

  nginxstatic:
    restart: on-failure
    build:
      context: .
      target: statics_server
    expose:
      - "80"
    labels:
      - "traefik.http.routers.nginxstatic.entryPoints=websecure"
      - "traefik.http.routers.nginxstatic.tls"
      - "traefik.http.routers.nginxstatic.rule=Host(`api.stagec.xyz`)&&!PathPrefix(`/admin`)&&PathPrefix(`/static`)"
      - "traefik.http.routers.nginxstatic.middlewares=nginx-strip-static@docker"
      - "traefik.http.middlewares.nginx-strip-static.stripprefix.prefixes=/static"
      - "traefik.http.middlewares.nginx-strip-static.stripprefix.forceSlash=true"

  gunicorn:
    restart: on-failure
    build:
      context: .
      target: backend
    depends_on:
      - redis
      - fluentd
    expose:
      - "80"
    labels:
      - "traefik.http.routers.gunicorn.entryPoints=websecure"
      - "traefik.http.routers.gunicorn.rule=Host(`api.stagec.xyz`)&&!PathPrefix(`/admin`)"
      - "traefik.http.routers.gunicorn.tls"

      - "traefik.http.routers.gunicorn-django-admin.entryPoints=websecure"
      - "traefik.http.routers.gunicorn-django-admin.rule=Host(`api.stagec.xyz`)&&PathPrefix(`/admin`)"
      - "traefik.http.routers.gunicorn-django-admin.middlewares=auth"
      - "traefik.http.routers.gunicorn-django-admin.tls="
    volumes:
      - ./.env:/app/.env
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: gunicorn

  traefik:
    image: traefik:v2.10
    restart: on-failure
    depends_on:
      - fluentd
    command:
     - "--api=true"
     - "--accesslog=true"
     - "--providers.docker"
     - "--entryPoints.websecure.address=:443"
     - "--entryPoints.traefik-api.address=:2082"
    ports:
      - "443:443"
      - "2082:2082"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik_dynamic.yml:/etc/traefik/dynamic.yml
    labels:
      - "traefik.http.routers.api.entryPoints=traefik-api"
      - "traefik.http.routers.api.rule=Host(`traefik.stagec.xyz`,`localhost`)"
      - "traefik.http.routers.api.service=api@internal"
#      - "traefik.http.routers.api.tls="
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=5wc-admin:$$apr1$$8oeds52v$$hQK3dfyNECLy/FfMq5Sxv1"
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: traefik

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
    container_name: elasticsearch
    environment:
      - "discovery.type=single-node"
    expose:
      - "9200"
    ports:
      - "9200:9200"
    labels:
      - "traefik.enable=false"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.1
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    links:
      - "elasticsearch"
    ports:
      - "5601"
    labels:
      - "traefik.http.routers.kibana.entryPoints=websecure"
      - "traefik.http.routers.kibana.rule=Host(`kibana.stagec.xyz`)"
      - "traefik.http.routers.kibana.middlewares=auth"
      - "traefik.http.routers.kibana.tls="

  fluentd:
    build:
      context: .
      target: fluentd_es
    links:
      - "elasticsearch"
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf
      - fluentd_buffer_logs:/fluentd/buffer_logs
    labels:
      - "traefik.enable=false"
    depends_on:
      change-vol-ownership:
        # Wait for the ownership to change
        condition: service_completed_successfully

  change-vol-ownership:
    # We can use any image we want as long as we can chown
    image: ubuntu
    # Need a user priviliged enough to chown
    user: "root"
    volumes:
      # The volume to chown
      - fluentd_buffer_logs:/fluentd/buffer_logs
    command: chmod 777 /fluentd/buffer_logs

volumes:
  fluentd_buffer_logs:
